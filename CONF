https://deliveringtechnology2018.atlassian.net/wiki/spaces/CC21S/pages/2494857219/QL-3+Basic+CRUD+Commands  


8*b?>)_XU+

Db.grad@celestial.co.uk



CREATE TABLE OWNERS(
owner_id int  AUTO_INCREMENT PRIMARY KEY, 
name varchar(50) not null
);

CREATE TABLE DOGS(
ID int  AUTO_INCREMENT PRIMARY KEY, 
name varchar(50) not null, 
age int not null, 
owner_id int not null,
FOREIGN KEY (owner_id) REFERENCES owners(owner_id)
);


INSERT INTO OWNERS (NAME) VALUES ('ASH'), ('MONIKA'), ('AKSHAT'), ('LINCOLN');

INSERT INTO DOGS (NAME, AGE, OWNER_ID) VALUES 
('Cricket', 10, 1),
('Rocky', 2, 2),
('Coco', 3, 3),
('Romeo', 5, 4),
('Charlie', 8, 1),
('Buddy', 2, 2),
('Duke', 3, 3),
('Bailey', 5, 4),
('Bear', 4, 2);
try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in));)


https://github.com/jordanbenbelaidn/BlackJack-Testing


https://github.com/abharg22/WebDevelopment
https://github.com/stream2stream/arrakis_v3/tree/main



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;

@Component
public class DataLoader {

    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public DataLoader(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @PostConstruct
    public void loadData() {
        try {
            // Load the CSV file from the resources folder
            InputStream inputStream = getClass().getResourceAsStream("/data.csv");
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));

            // Skip the header line if necessary
            String line = reader.readLine();

            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");

                // Assuming the CSV columns are in the order of table fields, adjust the indexes accordingly
                String field1 = data[0];
                int field2 = Integer.parseInt(data[1]);
                String field3 = data[2];
                int field4 = Integer.parseInt(data[3]);
                String field5 = data[4];
                int field6 = Integer.parseInt(data[5]);
                String field7 = data[6];
                int field8 = Integer.parseInt(data[7]);

                // Save data into respective tables using JdbcTemplate

                // Save data into table1
                jdbcTemplate.update("INSERT INTO table1 (field1, field2) VALUES (?, ?)", field1, field2);

                // Save data into table2
                jdbcTemplate.update("INSERT INTO table2 (field3, field4) VALUES (?, ?)", field3, field4);

                // Save data into table3
                jdbcTemplate.update("INSERT INTO table3 (field5, field6) VALUES (?, ?)", field5, field6);

                // Save data into table4
                jdbcTemplate.update("INSERT INTO table4 (field7, field8) VALUES (?, ?)", field7, field8);
            }

            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
