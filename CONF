https://deliveringtechnology2018.atlassian.net/wiki/spaces/CC21S/pages/2494857219/QL-3+Basic+CRUD+Commands  


8*b?>)_XU+

Db.grad@celestial.co.uk



CREATE TABLE OWNERS(
owner_id int  AUTO_INCREMENT PRIMARY KEY, 
name varchar(50) not null
);

CREATE TABLE DOGS(
ID int  AUTO_INCREMENT PRIMARY KEY, 
name varchar(50) not null, 
age int not null, 
owner_id int not null,
FOREIGN KEY (owner_id) REFERENCES owners(owner_id)
);


INSERT INTO OWNERS (NAME) VALUES ('ASH'), ('MONIKA'), ('AKSHAT'), ('LINCOLN');

INSERT INTO DOGS (NAME, AGE, OWNER_ID) VALUES 
('Cricket', 10, 1),
('Rocky', 2, 2),
('Coco', 3, 3),
('Romeo', 5, 4),
('Charlie', 8, 1),
('Buddy', 2, 2),
('Duke', 3, 3),
('Bailey', 5, 4),
('Bear', 4, 2);
try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in));)


https://github.com/jordanbenbelaidn/BlackJack-Testing


https://github.com/abharg22/WebDevelopment
https://github.com/stream2stream/arrakis_v3/tree/main


LOAD DATA INFILE '/path/to/data.csv'
INTO TABLE your_table
FIELDS TERMINATED BY ',' -- Assuming the fields in the CSV are comma-separated
LINES TERMINATED BY '\n'
IGNORE 1 LINES
(col1, col2, col3, col4, col5);
 @GetMapping("/security/date")
    public ResponseEntity<List<Security>> get5DaysBonds(@RequestParam("datetime") String encodedDate)
            throws ResourceNotFoundException{
        String datetime;
        List<Security> securities = null;
        try{
            datetime = URLDecoder.decode(encodedDate, StandardCharsets.UTF_8.name());
        }
        catch(UnsupportedEncodingException e){
//            return "Error decoding datetime";
            return ResponseEntity.ok().body(securities);
        }
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime parsedDatetime = LocalDateTime.parse(datetime, formatter);


 @Query(nativeQuery = true, value = "SELECT * FROM SECURITY WHERE MATURITY_DATE BETWEEN DATEADD('DAY', -5, :date) AND DATEADD('DAY', 5, :date)")
    List<Security> find5DaysBonds(LocalDateTime date);
//
        securities = ss.get5DaysBonds(parsedDatetime);
        return ResponseEntity.ok().body(securities);
    }
http://localhost:8080/security/date?datetime=2023-08-05%2010:39:37
